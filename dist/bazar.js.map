{"version":3,"file":"bazar.js","sources":["../src/bazar.mjs"],"sourcesContent":["const dispatch = config => {\n  const { id } = config;\n\n  // Array of IDs to notify for the state change just dispatched.\n  const notifs = [];\n\n  const t1 = Date.now();\n  // preferring forEach over a more functional .filter followed by .map\n  // to keep O(n) time complexity when looping through a large store.\n  Object.keys(_BAZAR_STORE_)\n    .forEach(currentId => {\n      // Safely accessing store[id].interests.\n      // Looping through IDs to check all the components that expressed interest in\n      // the state change.\n      if ((_BAZAR_STORE_[currentId].interests || []).indexOf(id) !== -1) {\n        notifs.push(currentId);\n      }\n    });\n\n\n\n  // execute effects\n  notifs.forEach(notif => {\n    const current = _BAZAR_STORE_[notif];\n\n    const { interests, handler } = current;\n    if (!handler) throw new Error(`Attempted trigger of undefined handler on ${notif}`);\n\n    // creating states object\n    const states = {};\n    interests\n      .forEach(interest => states[interest] = _BAZAR_STORE_[interest].sync());\n\n    // Directly passing states at component level to avoid reading from global\n    handler(states);\n  });\n  console.log(Date.now() - t1);\n};\n\n\n// Registering a new component in the global store.\n// Make sure that `register` function runs only one time per registered component.\n// Otherwise an error of `Expected unique ID` will be thrown.\n// e.g. in a React component: Call `register` in the `constructor` method.\nconst register = config => {\n  const {\n    id,\n    sync,\n    handler,\n    interests,\n  } = config;\n\n  if (!id) throw new Error('Expected registrant to have non-null id value');\n  if (!sync) throw new Error('Expected registrant to have a sync function');\n  if (_BAZAR_STORE_.hasOwnProperty(id)) throw new Error('Expected unique id');\n\n  // Creating instance\n  _BAZAR_STORE_[id] = {\n    interests,\n    handler,\n    sync,\n  };\n};\n\n// Safely reading initial state. Returns undefined if no initial state is defined\n// for that specific ID.\nconst initState = id => (_BAZAR_STORE_.initial || {})[id];\n\n// Must run only one time\nconst initStore = (states = {}) => {\n  // Evaluating the global execution context.\n  // Useful because e.g. In Node.js you don't have access to a `window` object\n  // but you can create a global store through `global`.\n  const context = typeof global !== 'undefined'\n    ? global\n    : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n        ? window\n        : {};\n\n  context._BAZAR_STORE_ = {};\n\n  // setting up an initial store containing optional initial states\n  _BAZAR_STORE_.initial = {};\n  const initials = Object.keys(states);\n  if (initials.length > 0) initials.forEach(id => {\n    _BAZAR_STORE_.initial[id] = states[id];\n  });\n};\n\nexport {\n  initStore,\n  initState,\n  register,\n  dispatch,\n};\n"],"names":["states","global","self","window","_BAZAR_STORE_","initial","initials","Object","keys","length","forEach","id","config","Error","sync","hasOwnProperty","interests","handler","notifs","t1","Date","now","currentId","indexOf","push","notif","current","interest","console","log"],"mappings":"2BAqEmBA,kBAAS,KAIQ,oBAAXC,OACnBA,OACgB,oBAATC,KACLA,KACkB,oBAAXC,OACLA,OACA,IAEAC,cAAgB,GAGxBA,cAAcC,QAAU,OAClBC,EAAWC,OAAOC,KAAKR,GACzBM,EAASG,OAAS,GAAGH,EAASI,iBAAQC,GACxCP,cAAcC,QAAQM,GAAMX,EAAOW,iCArBrBA,UAAOP,cAAcC,SAAW,IAAIM,8BAtBrCC,qDAQVD,EAAI,MAAM,IAAIE,MAAM,qDACpBC,EAAM,MAAM,IAAID,MAAM,kDACvBT,cAAcW,eAAeJ,GAAK,MAAM,IAAIE,MAAM,sBAGtDT,cAAcO,GAAM,WAClBK,UACAC,OACAH,8BA5DaF,GACPD,WAGFO,EAAS,GAETC,EAAKC,KAAKC,MAGhBd,OAAOC,KAAKJ,eACTM,iBAAQY,IAIyD,KAA3DlB,cAAckB,GAAWN,WAAa,IAAIO,QAAQZ,IACrDO,EAAOM,KAAKF,KAOlBJ,EAAOR,iBAAQe,OACPC,EAAUtB,cAAcqB,iCAGzBR,EAAS,MAAM,IAAIJ,mDAAmDY,OAGrEzB,EAAS,GACfgB,EACGN,iBAAQiB,UAAY3B,EAAO2B,GAAYvB,cAAcuB,GAAUb,SAGlEG,EAAQjB,KAEV4B,QAAQC,IAAIT,KAAKC,MAAQF"}