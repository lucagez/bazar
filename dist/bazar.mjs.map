{"version":3,"file":"bazar.mjs","sources":["../src/bazar.mjs"],"sourcesContent":["const dispatch = config => {\n  const { id } = config;\n\n  // Array of IDs to notify for the state change just dispatched.\n  const notifs = [];\n\n  const t1 = Date.now();\n  // preferring forEach over a more functional .filter followed by .map\n  // to keep O(n) time complexity when looping through a large store.\n  Object.keys(_BAZAR_STORE_)\n    .forEach(currentId => {\n      // Safely accessing store[id].interests.\n      // Looping through IDs to check all the components that expressed interest in\n      // the state change.\n      if ((_BAZAR_STORE_[currentId].interests || []).indexOf(id) !== -1) {\n        notifs.push(currentId);\n      }\n    });\n\n\n\n  // execute effects\n  notifs.forEach(notif => {\n    const current = _BAZAR_STORE_[notif];\n\n    const { interests, handler } = current;\n    if (!handler) throw new Error(`Attempted trigger of undefined handler on ${notif}`);\n\n    // creating states object\n    const states = {};\n    interests\n      .forEach(interest => states[interest] = _BAZAR_STORE_[interest].sync());\n\n    // Directly passing states at component level to avoid reading from global\n    handler(states);\n  });\n  console.log(Date.now() - t1);\n};\n\n\n// Registering a new component in the global store.\n// Make sure that `register` function runs only one time per registered component.\n// Otherwise an error of `Expected unique ID` will be thrown.\n// e.g. in a React component: Call `register` in the `constructor` method.\nconst register = config => {\n  const {\n    id,\n    sync,\n    handler,\n    interests,\n  } = config;\n\n  if (!id) throw new Error('Expected registrant to have non-null id value');\n  if (!sync) throw new Error('Expected registrant to have a sync function');\n  if (_BAZAR_STORE_.hasOwnProperty(id)) throw new Error('Expected unique id');\n\n  // Creating instance\n  _BAZAR_STORE_[id] = {\n    interests,\n    handler,\n    sync,\n  };\n};\n\n// Safely reading initial state. Returns undefined if no initial state is defined\n// for that specific ID.\nconst initState = id => (_BAZAR_STORE_.initial || {})[id];\n\n// Must run only one time\nconst initStore = (states = {}) => {\n  // Evaluating the global execution context.\n  // Useful because e.g. In Node.js you don't have access to a `window` object\n  // but you can create a global store through `global`.\n  const context = typeof global !== 'undefined'\n    ? global\n    : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n        ? window\n        : {};\n\n  context._BAZAR_STORE_ = {};\n\n  // setting up an initial store containing optional initial states\n  _BAZAR_STORE_.initial = {};\n  const initials = Object.keys(states);\n  if (initials.length > 0) initials.forEach(id => {\n    _BAZAR_STORE_.initial[id] = states[id];\n  });\n};\n\nexport {\n  initStore,\n  initState,\n  register,\n  dispatch,\n};\n"],"names":["dispatch","config","id","notifs","t1","Date","now","Object","keys","_BAZAR_STORE_","forEach","currentId","interests","indexOf","push","notif","current","handler","Error","states","interest","sync","console","log","register","hasOwnProperty","initState","initial","initStore","global","self","window","initials","length"],"mappings":"IAAMA,WAAWC,GACPC,WAGFC,EAAS,GAETC,EAAKC,KAAKC,MAGhBC,OAAOC,KAAKC,eACTC,iBAAQC,IAIyD,KAA3DF,cAAcE,GAAWC,WAAa,IAAIC,QAAQX,IACrDC,EAAOW,KAAKH,KAOlBR,EAAOO,iBAAQK,OACPC,EAAUP,cAAcM,iCAGzBE,EAAS,MAAM,IAAIC,mDAAmDH,OAGrEI,EAAS,GACfP,EACGF,iBAAQU,UAAYD,EAAOC,GAAYX,cAAcW,GAAUC,SAGlEJ,EAAQE,KAEVG,QAAQC,IAAIlB,KAAKC,MAAQF,IAQrBoB,WAAWvB,qDAQVC,EAAI,MAAM,IAAIgB,MAAM,qDACpBG,EAAM,MAAM,IAAIH,MAAM,kDACvBT,cAAcgB,eAAevB,GAAK,MAAM,IAAIgB,MAAM,sBAGtDT,cAAcP,GAAM,WAClBU,UACAK,OACAI,IAMEK,WAAYxB,UAAOO,cAAckB,SAAW,IAAIzB,IAGhD0B,WAAaT,kBAAS,KAIQ,oBAAXU,OACnBA,OACgB,oBAATC,KACLA,KACkB,oBAAXC,OACLA,OACA,IAEAtB,cAAgB,GAGxBA,cAAckB,QAAU,OAClBK,EAAWzB,OAAOC,KAAKW,GACzBa,EAASC,OAAS,GAAGD,EAAStB,iBAAQR,GACxCO,cAAckB,QAAQzB,GAAMiB,EAAOjB"}