{"version":3,"file":"bazar.mjs","sources":["../src/bazar.mjs"],"sourcesContent":["/**\n *\n * CONFIG:\n * `config` object is the fundamental part of `bazar`.\n *  It stores the required connections to issue edicts to the correct elements\n *  and syncing state from every part of your application.\n *  The composing parts of `config` object are:\n * @param {string} id - REQUIRED. Must be unique. Defines, in the global store, the\n *  reference of the element when you register or edict.\n * @param {Function} sync - OPTIONAL. Here you are returning which part of the local state you want\n *  to expose in the global store.\n * @param {array} interests - OPTIONAL. Array of watched IDs. When any of the ID edict,\n *  the `onEdict` function is invoked.\n * @param {Function} onEdict - OPTIONAL. Function invoked when any of the IDs specified in\n *  `interests` issue an edict. It is invoked with (id, state) as arguments. So you can\n *  update your local state accordingly to avoid unnecessary re-renders.\n * @param {Function} onPoke - OPTIONAL. Function invoked when a `poke` function is invoked with\n *  the id of the current component as first argument. `onPoke` is invoked with an optional argument\n *  passed from `poke`.\n */\n\n// TESTING DIFFERENT APPROACH => using variable scoped in `bazar` global context.\n// You can get rid of `window` or `self` context.\n// NOTE: every function has access to `_BAZAR_STORE_` but you cannot access it from outside\n// => e.g. chrome console.\n// It is now more stable => The store gets re-initialized every time the js file that calls it gets\n// updated.\nconst _BAZAR_STORE_ = new Object();\n\n// Looping through global store and invoking `onEdict` on every element that expressed an interest\n// on the ID that provoked a notification.\nconst edict = id => {\n  const { sync } = _BAZAR_STORE_[id];\n  if (!sync) throw new Error('Sync is required to issue an edict');\n  const state = sync();\n\n  // preferring forEach over a more functional .filter followed by .map\n  // to keep O(n) time complexity when looping through a large store.\n  Object.keys(_BAZAR_STORE_)\n    .forEach(currentId => {\n      // Safely accessing store[id].interests.\n      // Looping through IDs to check all the components that expressed interest in\n      // the state change.\n      if ((_BAZAR_STORE_[currentId].interests || []).indexOf(id) !== -1) {\n        const current = _BAZAR_STORE_[currentId];\n\n        const { onEdict } = current;\n        if (!onEdict) throw new Error(`Triggering undefined onEdict on ${currentId}`);\n\n        // Directly passing id and state at component level to avoid reading from global\n        onEdict(id, state);\n      }\n    });\n};\n\n// Registering a new component in the global store.\n// Make sure that `register` function runs only one time per registered component.\n// Otherwise an error of `Expected unique ID` will be thrown.\n// e.g. in a React component: Call `register` in the `constructor` method.\nconst register = config => {\n  const { id, willRerender = false } = config;\n\n  if (!id) throw new Error('Expected non-null id');\n  if (_BAZAR_STORE_.hasOwnProperty(id) && !willRerender) throw new Error('Expected unique id');\n\n  // Creating instance\n  Object.defineProperty(_BAZAR_STORE_, id, {\n    value: { ...config },\n    writable: false,\n    enumerable: true,\n  });\n};\n\n// The poke function let's you `poke` registered components with a valid `onPoke` function.\nconst poke = (id, arg) => {\n  const { onPoke } = (_BAZAR_STORE_[id] || {});\n  if (!onPoke) throw new Error('Poking component without onPoke method');\n  onPoke(arg);\n};\n\n// Safely reading synced state from one ID.\nconst getState = id => {\n  const { sync } = (_BAZAR_STORE_[id] || {});\n  return sync ? sync() : undefined;\n};\n\nexport {\n  getState,\n  register,\n  edict,\n  poke,\n};\n"],"names":["const","_BAZAR_STORE_","Object","edict","id","sync","Error","state","keys","forEach","currentId","interests","indexOf","onEdict","register","config","hasOwnProperty","willRerender","defineProperty","value","writable","enumerable","poke","arg","onPoke","getState","undefined"],"mappings":"AA2BAA,IAAMC,EAAgB,IAAIC,OAIpBC,WAAQC,SACKH,EAAcG,YAC1BC,EAAM,MAAM,IAAIC,MAAM,0CACrBC,EAAQF,IAIdH,OAAOM,KAAKP,GACTQ,iBAAQC,OAIyD,KAA3DT,EAAcS,GAAWC,WAAa,IAAIC,QAAQR,GAAY,OACjDH,EAAcS,eAGzBG,EAAS,MAAM,IAAIP,yCAAyCI,GAGjEG,EAAQT,EAAIG,OASdO,WAAWC,kDACY,IAEtBX,EAAI,MAAM,IAAIE,MAAM,2BACrBL,EAAce,eAAeZ,KAAQa,EAAc,MAAM,IAAIX,MAAM,sBAGvEJ,OAAOgB,eAAejB,EAAeG,EAAI,CACvCe,MAAOjB,iBAAKa,GACZK,UAAU,EACVC,YAAY,KAKVC,WAAQlB,EAAImB,UACItB,EAAcG,IAAO,eACpCoB,EAAQ,MAAM,IAAIlB,MAAM,0CAC7BkB,EAAOD,IAIHE,WAAWrB,UACGH,EAAcG,IAAO,gBAChCC,EAAOA,SAASqB"}